{"version":3,"sources":["components/ScoreBoard.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["randomUserNames","ScoreBoard","score","useState","gameStates","setGameStates","userName","setUserName","fetchData","a","axios","get","response","data","Object","keys","map","item","console","log","useEffect","Math","floor","random","length","descendingGameStates","sort","b","className","gameState","index","username","onClick","post","then","catch","err","candyColors","blueCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","greenCandy","App","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfFour","rowOfFour","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","candyColor","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.781ce197.chunk.js","sourcesContent":["import axios from 'axios'\nimport {useEffect, useState} from \"react\"\n\nconst randomUserNames = [\n    'PurpleFish',\n    'LankyLama',\n    'SillySloth',\n    'LizardEyes',\n    'BlowBlizzard',\n    'AnteaterEars',\n    \"BulbBear\",\n    'OstrichOar',\n    'CamelLegs',\n    'KolaKoala',\n    'LionLives',\n    'MouthyTiger'\n]\n\nconst ScoreBoard = ({score}) => {\n    const [gameStates, setGameStates] = useState(null)\n    const [userName, setUserName] = useState(null)\n\n    const fetchData = async () => {\n        const response = await axios.get('http://localhost:8000/scores')\n        const data = Object.keys(response.data.data).map(item => response.data.data[item])\n        setGameStates(data)\n    }\n\n    console.log(gameStates)\n\n    const saveData = () => {\n\n        const data = {\n            username: userName,\n            score: score\n        }\n        axios.post('http://localhost:8000/addscore', data)\n            .then(response => console.log(response))\n            .catch(err => console.log(err))\n            .then(fetchData)\n    }\n\n    useEffect(() => {\n        fetchData()\n        setUserName(randomUserNames[Math.floor(Math.random() * randomUserNames.length)])\n    }, [])\n\n    const descendingGameStates = gameStates?.sort((a,b) => b.score - a.score)\n\n return (\n     <div className=\"score-board\">\n         <h2>{userName} score:{score}</h2>\n\n         <h2>High Scores:</h2>\n         {descendingGameStates?.map((gameState, index) => (\n             <div key={index}>\n                 <h3>{gameState.username}: {gameState.score}</h3>\n             </div>\n             ))}\n         <button onClick={saveData}>save score</button>\n     </div>\n )\n}\n\nexport default ScoreBoard\n","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import { useEffect, useState } from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport blueCandy from \"./images/blue-candy.png\";\nimport greenCandy from \"./images/green-candy.png\";\nimport orangeCandy from \"./images/orange-candy.png\";\nimport purpleCandy from \"./images/purple-candy.png\";\nimport redCandy from \"./images/red-candy.png\";\nimport yellowCandy from \"./images/yellow-candy.png\";\nimport blank from \"./images/blank.png\";\n\nconst width = 8;\nconst candyColors = [\n  blueCandy,\n  orangeCandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy,\n  greenCandy,\n];\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        columnOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\n        54, 55, 62, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        rowOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        columnOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        rowOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target);\n  };\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target);\n  };\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(\n      squareBeingDragged.getAttribute(\"data-id\")\n    );\n    const squareBeingReplacedId = parseInt(\n      squareBeingReplaced.getAttribute(\"data-id\")\n    );\n\n    currentColorArrangement[squareBeingReplacedId] =\n      squareBeingDragged.getAttribute(\"src\");\n    currentColorArrangement[squareBeingDraggedId] =\n      squareBeingReplaced.getAttribute(\"src\");\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + width,\n    ];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (\n      squareBeingReplacedId &&\n      validMove &&\n      (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)\n    ) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] =\n        squareBeingReplaced.getAttribute(\"src\");\n      currentColorArrangement[squareBeingDraggedId] =\n        squareBeingDragged.getAttribute(\"src\");\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor =\n        candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [\n    checkForColumnOfFour,\n    checkForRowOfFour,\n    checkForColumnOfThree,\n    checkForRowOfThree,\n    moveIntoSquareBelow,\n    currentColorArrangement,\n  ]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}